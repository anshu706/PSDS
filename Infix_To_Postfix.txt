PSDS
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

===============================================================================================================\\\\\\\
// INFIX TO POSTFIX ==============================================================================================||||
===============================================================================================================///////


#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct stack
{
	int size;
	int top;
	char *arr;
};

int stackTop(struct stack* sp)            // peak element (top element)
{
	return sp->arr[sp->top];
}

int isEmpty(struct stack *ptr)
{
	if (ptr->top == -1)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int isFull(struct stack *ptr)
{
	if ( ptr->top == ptr->size - 1)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

void push ( struct stack* ptr, char val)
{
	if(isFull(ptr))
	{
		printf("Cannot push %d to the stack\n",val);
	}
	else
	{
		ptr->top++;
		ptr->arr[ptr->top]=val;
	}
}

char pop(struct stack* ptr)
{
	if (isEmpty(ptr))
	{
		printf("Cannot pop from the stack\n");
		return -1;
	}
	else
	{
		char val = ptr->arr[ptr->top];
		ptr->top--;
		return val;
	}
}

int precedence(char ch)
{
	if(ch == '*'|| ch == '/')
	{
		return 2;
	}
	else if(ch == '+' || ch == '-')
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int isOperator(char ch)
{
	if(ch == '+'||ch == '-'||ch == '*'||ch == '/')
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

char* infixToPostfix(char* infix)
{
	struct stack * sp = (struct stack *)malloc(sizeof(struct stack));
	sp->size = 10;
	sp->top = -1;
	sp->arr = (char*)malloc(sp->size * sizeof(char));
	char * postfix = (char *)malloc((strlen(infix)+1) * sizeof(char));
	int i=0;  // Track infix traversal
	int j=0;  // Track postfix addition
	while (infix[i]!='\0')
	{
		if(!isOperator(infix[i]))
		{
			postfix[j] = infix[i];
			j++;
			i++;
		}
		else
		{
			if(precedence(infix[i])> precedence(stackTop(sp)))
			{
				push(sp,infix[i]);
				i++;
			}
			else
			{
				postfix[j] = pop(sp);
				j++;
			}
		}
	}
	while(!isEmpty(sp))
	{
		postfix[j] = pop(sp);
		j++;
	}
	postfix[j] = '\0';
	return postfix;
}

int main()
{
	char * infix = "a+b*c-d/e";
	printf("postfix is %s",infixToPostfix(infix));
	return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


===============================================================================================================\\\\\\\
//POSTFIX TO INFIX ==============================================================================================||||
===============================================================================================================///////

// POSTFIX TO INFIX

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>

struct stack
{
	int size;
	int top;
	char **arr; // array of strings
};



int isEmpty(struct stack *ptr)
{
	return ptr->top == -1;   // short hand
	
}

int isFull(struct stack *ptr)
{
    return  ptr->top == ptr->size - 1;  // short hand


}

void push (struct stack *ptr, char *val)
{
	if(isFull(ptr))
	{
		printf("Stack Overflow! Cannot push %s to the stack\n",val);
	}
	else
	{
		ptr->top++;
		ptr->arr[ptr->top] = (char*)malloc((strlen(val)+1)*sizeof(char));
		strcpy(ptr->arr[ptr->top],val);
	}
}

char* pop(struct stack *ptr)
{
	if (isEmpty(ptr))
	{
		printf("Stack Underflow! Cannot pop from the stack\n");
		return NULL;
	}
	else
	{
	    return ptr->arr[ptr->top--];

	}
}

int precedence(char ch)
{
	if(ch == '*'|| ch == '/')
	{
		return 2;
	}
	else if(ch == '+' || ch == '-')
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int isOperator(char ch)
{
    return ch == '+'||ch == '-'||ch == '*'||ch == '/'; // short hand 
}


char* postfixToInfix(char* postfix)
{
	struct stack *sp = (struct stack *)malloc(sizeof(struct stack));
	sp->size = 100;
	sp->top = -1;
	sp->arr = (char**)malloc(sp->size * sizeof(char*));
	
	for(int i=0;postfix[i] != '\0'; i++)
	{
	    char ch = postfix[i];
	    
	    if (isalnum(ch))
	    {
	        char operand[2] = {ch, '\0'};
	        push(sp,operand);
	    }
	    else if(isOperator(ch))
	    {
	        char *op2 = pop(sp);
	        char *op1 = pop(sp);
	        char *expr = (char*)malloc(strlen(op1) + strlen(op2)+4);
	        sprintf(expr, "(%s%c%s)",op1,ch,op2);
	        push(sp,expr);
	    }
	}
	return pop(sp);
}

int main()
{
	char * postfix = "abc/d*+";
	printf("Infix is %s",postfixToInfix(postfix));
	return 0;
}
